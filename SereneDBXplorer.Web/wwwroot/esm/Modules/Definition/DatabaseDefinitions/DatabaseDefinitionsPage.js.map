{
  "version": 3,
  "sources": ["../../../../../Modules/Definition/DatabaseDefinitions/DatabaseDefinitionsPage.ts", "../../../../../Modules/Definition/DatabaseDefinitions/DatabaseDefinitionsGrid.ts", "../../../../../Modules/ServerTypes/Definition/DBTypeName.ts", "../../../../../Modules/ServerTypes/Definition/DatabaseDefinitionsColumns.ts", "../../../../../Modules/ServerTypes/Definition/DatabaseDefinitionsForm.ts", "../../../../../Modules/ServerTypes/Definition/DatabaseDefinitionsRow.ts", "../../../../../Modules/ServerTypes/Definition/DatabaseDefinitionsService.ts", "../../../../../Modules/Definition/DatabaseDefinitions/DatabaseDefinitionsDialog.ts"],
  "sourcesContent": ["\uFEFFimport { initFullHeightGridPage } from '@serenity-is/corelib/q';\r\nimport { DatabaseDefinitionsGrid } from './DatabaseDefinitionsGrid';\r\n\r\n$(function() {\r\n    initFullHeightGridPage(new DatabaseDefinitionsGrid($('#GridDiv')).element);\r\n});", "import { Decorators, EntityGrid, QuickSearchField } from '@serenity-is/corelib';\r\nimport { text } from '@serenity-is/corelib/q';\r\nimport { DatabaseDefinitionsColumns, DatabaseDefinitionsRow, DatabaseDefinitionsService } from '../../ServerTypes/Definition';\r\nimport { DatabaseDefinitionsDialog } from './DatabaseDefinitionsDialog';\r\n\r\n@Decorators.registerClass('SereneDBXplorer.Definition.DatabaseDefinitionsGrid')\r\nexport class DatabaseDefinitionsGrid extends EntityGrid<DatabaseDefinitionsRow, any> {\r\n    protected getColumnsKey() { return DatabaseDefinitionsColumns.columnsKey; }\r\n    protected getDialogType() { return DatabaseDefinitionsDialog; }\r\n    protected getIdProperty() { return DatabaseDefinitionsRow.idProperty; }\r\n    protected getInsertPermission() { return DatabaseDefinitionsRow.insertPermission; }\r\n    protected getLocalTextPrefix() { return DatabaseDefinitionsRow.localTextPrefix; }\r\n    protected getService() { return DatabaseDefinitionsService.baseUrl; }\r\n\r\n    constructor(container: JQuery) {\r\n        super(container);\r\n    }\n    protected getQuickSearchFields(): QuickSearchField[]\n    {\n        const fld = DatabaseDefinitionsRow.Fields;\n        const txt = (s) =>\r\n            text(`Db.${DatabaseDefinitionsRow.localTextPrefix}.${s}`).toLowerCase();\n\n        return [\n            { name: \"\", title: \"All\" },\n            { name: fld.DatabaseName, title: txt(fld.DatabaseName) },\n            { name: fld.HostName, title: txt(fld.HostName) },\n            { name: fld.DbTypeId, title: txt(fld.DbTypeId) }\n        ];\n    }\r\n}", "\uFEFFimport { Decorators } from \"@serenity-is/corelib\";\n\nexport enum DBTypeName {\n    SqlServer = 0,\n    PostgreSql = 1\n}\nDecorators.registerEnumType(DBTypeName, 'SereneDBXplorer.Definition.DBTypeName', 'DatabaseDefinitions.DBTypeName');\n", "\uFEFFimport { DBTypeName } from \"./DBTypeName\";\n\nexport class DatabaseDefinitionsColumns {\n    static columnsKey = 'Definition.DatabaseDefinitions';\n}\n\n[DBTypeName]; // referenced types\n", "import { StringEditor, DateEditor, EnumEditor, BooleanEditor, PrefixedContext } from \"@serenity-is/corelib\";\nimport { DBTypeName } from \"./DBTypeName\";\nimport { initFormType } from \"@serenity-is/corelib/q\";\n\nexport interface DatabaseDefinitionsForm {\n    DatabaseName: StringEditor;\n    HostName: StringEditor;\n    CreationDate: DateEditor;\n    DbTypeId: EnumEditor;\n    IsWindowsAuth: BooleanEditor;\n    Username: StringEditor;\n    PasswordHash: StringEditor;\n    PasswordSalt: StringEditor;\n    IsActive: BooleanEditor;\n}\n\nexport class DatabaseDefinitionsForm extends PrefixedContext {\n    static formKey = 'Definition.DatabaseDefinitions';\n    private static init: boolean;\n\n    constructor(prefix: string) {\n        super(prefix);\n\n        if (!DatabaseDefinitionsForm.init)  {\n            DatabaseDefinitionsForm.init = true;\n\n            var w0 = StringEditor;\n            var w1 = DateEditor;\n            var w2 = EnumEditor;\n            var w3 = BooleanEditor;\n\n            initFormType(DatabaseDefinitionsForm, [\n                'DatabaseName', w0,\n                'HostName', w0,\n                'CreationDate', w1,\n                'DbTypeId', w2,\n                'IsWindowsAuth', w3,\n                'Username', w0,\n                'PasswordHash', w0,\n                'PasswordSalt', w0,\n                'IsActive', w3\n            ]);\n        }\n    }\n}\n\n[DBTypeName]; // referenced types\n", "\uFEFFimport { DBTypeName } from \"./DBTypeName\";\nimport { fieldsProxy } from \"@serenity-is/corelib/q\";\n\nexport interface DatabaseDefinitionsRow {\n    DatabaseDefinitionId?: number;\n    DatabaseName?: string;\n    HostName?: string;\n    CreationDate?: string;\n    DbTypeId?: DBTypeName;\n    IsWindowsAuth?: boolean;\n    Username?: string;\n    PasswordHash?: string;\n    PasswordSalt?: string;\n    IsActive?: boolean;\n}\n\nexport abstract class DatabaseDefinitionsRow {\n    static readonly idProperty = 'DatabaseDefinitionId';\n    static readonly nameProperty = 'DatabaseName';\n    static readonly localTextPrefix = 'Definition.DatabaseDefinitions';\n    static readonly deletePermission = 'Administration:Definitions';\n    static readonly insertPermission = 'Administration:Definitions';\n    static readonly readPermission = 'Administration:Definitions';\n    static readonly updatePermission = 'Administration:Definitions';\n\n    static readonly Fields = fieldsProxy<DatabaseDefinitionsRow>();\n}\n", "\uFEFFimport { SaveRequest, SaveResponse, DeleteRequest, DeleteResponse, RetrieveRequest, RetrieveResponse, ListRequest, ListResponse } from \"@serenity-is/corelib\";\nimport { DatabaseDefinitionsRow } from \"./DatabaseDefinitionsRow\";\nimport { ServiceOptions, serviceRequest } from \"@serenity-is/corelib/q\";\n\nexport namespace DatabaseDefinitionsService {\n    export const baseUrl = 'Definition/DatabaseDefinitions';\n\n    export declare function Create(request: SaveRequest<DatabaseDefinitionsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Update(request: SaveRequest<DatabaseDefinitionsRow>, onSuccess?: (response: SaveResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Delete(request: DeleteRequest, onSuccess?: (response: DeleteResponse) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function Retrieve(request: RetrieveRequest, onSuccess?: (response: RetrieveResponse<DatabaseDefinitionsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n    export declare function List(request: ListRequest, onSuccess?: (response: ListResponse<DatabaseDefinitionsRow>) => void, opt?: ServiceOptions<any>): JQueryXHR;\n\n    export const Methods = {\n        Create: \"Definition/DatabaseDefinitions/Create\",\n        Update: \"Definition/DatabaseDefinitions/Update\",\n        Delete: \"Definition/DatabaseDefinitions/Delete\",\n        Retrieve: \"Definition/DatabaseDefinitions/Retrieve\",\n        List: \"Definition/DatabaseDefinitions/List\"\n    } as const;\n\n    [\n        'Create', \n        'Update', \n        'Delete', \n        'Retrieve', \n        'List'\n    ].forEach(x => {\n        (<any>DatabaseDefinitionsService)[x] = function (r, s, o) {\n            return serviceRequest(baseUrl + '/' + x, r, s, o);\n        };\n    });\n}\n", "\uFEFFimport { Decorators, EntityDialog } from '@serenity-is/corelib';\r\nimport { DatabaseDefinitionsForm, DatabaseDefinitionsRow, DatabaseDefinitionsService } from '../../ServerTypes/Definition';\r\n\r\n@Decorators.registerClass('SereneDBXplorer.Definition.DatabaseDefinitionsDialog')\r\nexport class DatabaseDefinitionsDialog extends EntityDialog<DatabaseDefinitionsRow, any> {\r\n    protected getFormKey() { return DatabaseDefinitionsForm.formKey; }\r\n    protected getIdProperty() { return DatabaseDefinitionsRow.idProperty; }\r\n    protected getLocalTextPrefix() { return DatabaseDefinitionsRow.localTextPrefix; }\r\n    protected getNameProperty() { return DatabaseDefinitionsRow.nameProperty; }\r\n    protected getService() { return DatabaseDefinitionsService.baseUrl; }\r\n    protected getDeletePermission() { return DatabaseDefinitionsRow.deletePermission; }\r\n    protected getInsertPermission() { return DatabaseDefinitionsRow.insertPermission; }\r\n    protected getUpdatePermission() { return DatabaseDefinitionsRow.updatePermission; }\r\n\r\n    protected form = new DatabaseDefinitionsForm(this.idPrefix);\r\n}"],
  "mappings": "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",
  "names": ["import_q", "import_corelib", "import_q", "import_corelib", "DBTypeName", "DatabaseDefinitionsColumns", "__name", "import_corelib", "import_q", "_DatabaseDefinitionsForm", "prefix", "w0", "w1", "w2", "w3", "DatabaseDefinitionsForm", "__name", "import_q", "DatabaseDefinitionsRow", "__name", "import_q", "DatabaseDefinitionsService", "x", "r", "s", "o", "import_corelib", "DatabaseDefinitionsDialog", "DatabaseDefinitionsForm", "DatabaseDefinitionsRow", "DatabaseDefinitionsService", "__name", "__decorateClass", "DatabaseDefinitionsGrid", "DatabaseDefinitionsColumns", "DatabaseDefinitionsDialog", "DatabaseDefinitionsRow", "DatabaseDefinitionsService", "container", "fld", "txt", "__name", "s", "__decorateClass", "DatabaseDefinitionsGrid"]
}
